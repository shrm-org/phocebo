<?php
    
/**
 * Phởcebo
 *
 * PHP Version 5.
 *
 * @copyright 2015-2016 SHRM (http://www.shrm.org)
 * @license   http://www.opensource.org/licenses/mit-license.php
 * @link      https://github.com/shrm-org/phocebo
 */
 

namespace Phocebo;


/**
 * phocebo class.
 *
 * The hởcebo class is to manage the calls from the internal application Embark
 * to the Docbeo API. This class will make the call and return a SHRM standard
 * JSON file for Embark to process. Programming logic will remain with Embark.
 * 
 * @package Phởcebo
 * @author Patricia Walton <patricia.walton@shrm.org>
 * @version 0.0.4
 * @license MIT
 * @copyright 2015 SHRM
 * @link https://doceboapi.docebosaas.com/api/docs
 */
 
class phocebo {

    /**
     * getdoceboId function.
     * Return the Docebo ID based on the users username which is set to the
     * users email address.
     *
     * @package Phởcebo Diner
     * @author Patricia Walton <patricia.walton@shrm.org>
     * @version 0.0.4
     * @access public
     * @param array $parameters Array containing 'email'
     * @return object Object containing 'doceboId' or 'error' if failed
     * @link https://doceboapi.docebosaas.com/api/docs#!/user/user_checkUsername_post_0
     * @todo determine if we need to check numeric id or email
     * @todo update test to report on Object not JSON
     */
     
     
    public function getdoceboId ( $parameters ) {
        
       if ( !array_key_exists( 'email', $parameters) ) {
           
           $json_array = array ('success' => false, 'error' => '400', 'message' => 'Parameter email is missing');
           
       } elseif ( !filter_var($parameters['email'], FILTER_VALIDATE_EMAIL)) {
           
           $json_array = array ('success' => false, 'error' => '400', 'message' => 'must be users email address');

       } else {
           
           $action = '/user/checkUsername';
       
           $data_params = array (
        
               'userid'                 => $parameters['email'],
        
               'also_check_as_email'    => true,
    	
           );
     
           $response = self::call ( $action, $data_params );
           
           $json_array = json_decode($response, true);
           
           if ( false == $json_array['success']) {
               
               if ('201' == $json_array['error']) {
                   
                   $json_array['message'] = "User not found";
                   
               }
               
               if ('202' == $json_array['error']) {
                   
                   $json_array['message'] = "Invalid Parameters passed";
                   
               }
    
               if ('500' == $json_array['error']) {
                   
                   $json_array['message'] = 'Internal server error';
                   
               }
    
           } else {
               
               $json_array['doceboId'] = $json_array['idst'];
               
               unset($json_array['idst']);
    
           }
           
       }
       
       $responseObj = json_decode ( json_encode ( $json_array ), FALSE );
       
       return( $responseObj );
 
    }

   
    
    /**
     * addUser function.
     * Add a user Docebo using the email address. Sets the login username to
     * the email address.
     *
     * @package Phởcebo Diner
     * @author Patricia Walton <patricia.walton@shrm.org>
     * @version 0.0.4
     * @access public
     * @param array $parameters Array containing 'firstName', 'lastname',
     *    'email'
     * @return object $responseObj
     * (stdClass) (2) { ["success"]=> bool(true) ["doceboId"]=> string(5) "12367" }
     *
     * @link https://doceboapi.docebosaas.com/api/docs#!/user/user_create_post_5
     * @todo test $responseObj has expected attributes from server when valid 
     * @todo test $responseObj has expected attributes from server when invalid 
     * @todo test $responseObj has each of the expected attributes when valid
     * @todo test $responseObj does not have attributes (such as idst)
     * @todo test $responseObj custom errors has proper attributes success, error and message
     * @todo test $responseObj custom errors responds with reporting error 400
     * @todo add phake mocking for addUser testing
     */
     
     
    public function addUser ( $parameters ) {
           
        if ( !array_key_exists( 'firstName', $parameters) ) {
           
           $json_array = array ('success' => false, 'error' => '400', 'message' => 'Parameter firstName is missing');

        } elseif ( !array_key_exists( 'lastName', $parameters) ) {
           
           $json_array = array ('success' => false, 'error' => '400', 'message' => 'Parameter lastName is missing');

        } elseif ( !array_key_exists( 'email', $parameters) ) {
           
           $json_array = array ('success' => false, 'error' => '400', 'message' => 'Parameter email is missing');

        } else {
            
            $action = '/user/create';
            
            $data_params = array (
            
                'userid'                 => $parameters['email'],
                
                'firstname'              => $parameters['firstName'],
                
                'lastname'               => $parameters['lastName'],
                
                'email'                  => $parameters['email'],
                
                'valid'                  => true,
                
                'role'                   => 'student',
                
                'disableNotifications'   => false,
            
            );
            
            $response = self::call($action, $data_params);
           
            $json_array = json_decode($response, true);
           
            if ( false == $json_array['success']) {
               
               if ('201' == $json_array['error']) {
                   
                   $json_array['message'] = "Empty email used for user name";
                   
               }
               
               if ('202' == $json_array['error']) {
                   
                   $json_array['message'] = "Error while assigning user level";
                   
               }
            
               if ('203' == $json_array['error']) {
                   
                   $json_array['message'] = "Cannot create godadmin users";
                   
               }
            
               if ('204' == $json_array['error']) {
                   
                   $json_array['message'] = "Cannot save user";
                   
               }
            
               if ('500' == $json_array['error']) {
                   
                   $json_array['message'] = 'Internal server error';
                   
               }
            
            } else {
               
               $json_array['doceboId'] = $json_array['idst'];
               
               unset ( $json_array['idst'] );

            
            }
           
       }

       $responseObj = json_decode ( json_encode ( $json_array ), FALSE );
       
       return( $responseObj );
        
    }
    
    
    /**
     * deleteUser function.
     * 
     * @package Phởcebo Diner
     * @author Patricia Walton <patricia.walton@shrm.org>
     * @version 0.0.4
     * @access public
     * @param array $parameters
     * @return void
     
     * @todo test $responseObj has expected attributes from server when valid 
     * @todo test $responseObj has expected attributes from server when invalid 
     * @todo test $responseObj has each of the expected attributes when valid
     * @todo test $responseObj does not have attributes (such as idst)
     * @todo test $responseObj custom errors has proper attributes success, error and message
     * @todo test $responseObj custom errors responds with reporting error 400
     * @todo add phake mocking to test deleteUser
     */
     
    public function deleteUser ( $parameters ) {
           
        if ( !array_key_exists( 'doceboId', $parameters) ) {
           
           $json_array = array ('success' => false, 'error' => '400', 'message' => 'Parameter doceboId missing');

        } else {
            
            $action = '/user/delete';
            
            $data_params = array (
            
                'id_user'                 => $parameters['doceboId'],
            
            );
            
            $response = self::call($action, $data_params);
           
            $json_array = json_decode($response, true);
            
            if ( false == $json_array['success']) {
               
               if ('210' == $json_array['error']) {
                   
                   $json_array['message'] = "Invalid user specification";
                   
               }
               
               if ('211' == $json_array['error']) {
                   
                   $json_array['message'] = "Error in user deletion";
                   
               }
            
               if ('500' == $json_array['error']) {
                   
                   $json_array['message'] = 'Internal server error';
                   
               }
            
            } else {
               
               $json_array['doceboId'] = $json_array['idst'];
               
               unset ( $json_array['idst'] );

            
            }
           
       }

       $responseObj = json_decode ( json_encode ( $json_array ), FALSE );
       
       return( $responseObj );
        
    }


    
    /**
     * editUser function.
     * 
     * @package Phởcebo Diner
     * @author Patricia Walton <patricia.walton@shrm.org>
     * @version 0.0.4
     * @access public
     * @param array $parameters
     * @return void
     
     * @todo test $responseObj has expected attributes from server when valid 
     * @todo test $responseObj has expected attributes from server when invalid 
     * @todo test $responseObj has each of the expected attributes when valid
     * @todo test $responseObj does not have attributes (such as idst)
     * @todo test $responseObj custom errors has proper attributes success, error and message
     * @todo test $responseObj custom errors responds with reporting error 400
     
     */
     
    public function editUser ( $parameters ) {
           
        if ( !array_key_exists( 'doceboId', $parameters) ) {
           
           $json_array = array ('success' => false, 'error' => '400', 'message' => 'Parameter doceboId missing');

        } else {
            
            $action = '/user/edit';
            
            $data_params = array (
            
                'id_user'                 => $parameters['doceboId'],
                
                'userid'                  => $parameters['email'],
                
                'firstname'               => $parameters['firstName'],
            
                'firstname'               => $parameters['firstName'],

            );
            
            $response = self::call($action, $data_params);
           
            $json_array = json_decode($response, true);
            
            var_dump($json_array);
           
            if ( false == $json_array['success']) {
               
               if ('201' == $json_array['error']) {
                   
                   $json_array['message'] = "Invalid user specification";
                   
               }
               
               if ('203' == $json_array['error']) {
                   
                   $json_array['message'] = "Error while updating user";
                   
               }
            
               if ('500' == $json_array['error']) {
                   
                   $json_array['message'] = 'Internal server error';
                   
               }
            
            } else {
               
               $json_array['doceboId'] = $json_array['idst'];
               
               unset ( $json_array['idst'] );

            
            }
           
       }

       $responseObj = json_decode ( json_encode ( $json_array ), FALSE );
       
       return( $responseObj );
        
    }

    

    /**
     * getUserFields function.
     * 
     * @package Phởcebo Diner
     * @author Patricia Walton <patricia.walton@shrm.org>
     * @version 0.0.4
     * @access public
     * @return object $responseObj
       object(stdClass) (2) {
              ["fields"]=>
              array(1) {
                [0]=>
                object(stdClass) (2) {
                  ["id"]=>
                  int(1)
                  ["name"]=>
                  string(8) "Job Role"
                }
              }
              ["success"]=>
              bool(true)
            }
     * @todo test $responseObj has expected attributes from server when invalid 
     */
     
    public function getUserFields ( ) {
        
        $action = '/user/fields';
        
        $data_params = array (
        
            'language'                 => null,
            
        );
        

       $response = self::call ( $action, $data_params );
       
       $json_array = json_decode($response, true);
       
       if ( false == $json_array['success']) {

           if ('500' == $json_array['error']) {
               
               $json_array['message'] = 'Internal server error';
               
           }

       } 
           
       $responseObj = json_decode ( json_encode( $json_array ), FALSE );
       
       return( $responseObj );
        
    }

    

    /**
     * getUserProfile function.
     * 
     * @package Phởcebo Diner
     * @author Patricia Walton <patricia.walton@shrm.org>
     * @version 0.0.4
     * @access public
     * @static
     * @return object $responseObj 
         object(stdClass) (11) {
          ["id_user"]=>
          string(5) "12339"
          ["userid"]=>
          string(4) "vdas"
          ["firstname"]=>
          string(3) "Vla"
          ["lastname"]=>
          string(3) "Das"
          ["email"]=>
          string(16) "vdasic@gmail.com"
          ["signature"]=>
          string(0) ""
          ["valid"]=>
          bool(true)
          ["register_date"]=>
          string(19) "2015-09-23 03:16:23"
          ["last_enter"]=>
          string(19) "2015-09-23 01:20:11"
          ["fields"]=>
          array(1) {
            [0]=>
            object(stdClass) (3) {
              ["id"]=>
              string(1) "1"
              ["name"]=>
              string(8) "Job Role"
              ["value"]=>
              string(1) "3"
            }
          }
          ["success"]=>
          bool(true)
        }

        object(stdClass) (3) {
          ["success"]=>
          bool(false)
          ["error"]=>
          int(201)
          ["message"]=>
          string(26) "Invalid user specification"
        }
     * @todo add Phake to mock calls 
     */
     
    public function getUserProfile ( $parameters ) {

       if ( !array_key_exists( 'doceboId', $parameters) ) {
           
           $json_array = array ('success' => false, 'error' => '400', 'message' => 'Parameter doceboId missing');
           
       } else {

            $action = '/user/profile';
            
            $data_params = array (
            
                'id_user'                 => $parameters['doceboId'],
                
            );
            

           $response = self::call ( $action, $data_params );
           
           $json_array = json_decode($response, true);
           
           if ( false == $json_array['success']) {
    
               if ('201' == $json_array['error']) {
                   
                   $json_array['message'] = 'Invalid user specification';
                   
               }

               if ('500' == $json_array['error']) {
                   
                   $json_array['message'] = 'Internal server error';
                   
               }
    
           } else { // Success == true
               
               $json_array['doceboId'] = $json_array['id_user'];

               unset ( $json_array['id_user'] );
    
               $json_array['firstName'] = $json_array['firstname'];
               
               unset ( $json_array['firstname'] );

               $json_array['lastName'] = $json_array['lastname'];
               
               unset ( $json_array['lastname'] );

               $json_array['registerDate'] = $json_array['register_date'];
               
               unset ( $json_array['register_date'] );

               $json_array['lastEnter'] = $json_array['last_enter'];
               
               unset ( $json_array['last_enter'] );

           }
           
       }
        
       $responseObj = json_decode ( json_encode( $json_array ), FALSE );
       
       return( $responseObj );
        
    }

    

    /**
     * suspendUser function.
     * 
     * @package Phởcebo Diner
     * @author Patricia Walton <patricia.walton@shrm.org>
     * @version 0.0.4
     * @access public
     * @param array $parameters
     * @return object $responseObj
     
            object(stdClass) (2) {
              ["doceboId"]=>
              string(5) "12339"
              ["success"]=>
              bool(true)
            }
     
             object(stdClass)#355 (3) {
              ["success"]=>
              bool(false)
              ["error"]=>
              int(210)
              ["message"]=>
              string(26) "Invalid user specification"
            }

     * @todo add Phake to mock calls 
     * @todo follow up on unenroll_deactivated
     */
     
    public function suspendUser ( $parameters ) {
           
        if ( !array_key_exists( 'doceboId', $parameters) ) {
           
           $json_array = array ('success' => false, 'error' => '400', 'message' => 'Parameter doceboId missing');

        } else {
            
            $action = '/user/suspend';
            
            $data_params = array (
            
                'id_user'                 => $parameters['doceboId'],
                
//                 'unenroll_deactivated'    => Should we deactivate all the future enrollments?
            
            );
            
            $response = self::call($action, $data_params);
           
            $json_array = json_decode($response, true);
            
            if ( false == $json_array['success']) {
               
               if ('210' == $json_array['error']) {
                   
                   $json_array['message'] = "Invalid user specification";
                   
               }
               
               if ('211' == $json_array['error']) {
                   
                   $json_array['message'] = "Error in user deletion";
                   
               }
            
               if ('500' == $json_array['error']) {
                   
                   $json_array['message'] = 'Internal server error';
                   
               }
            
            } else {
               

               $json_array['doceboId'] = $json_array['idst'];
               
               unset ( $json_array['idst'] );
            
            }
           
       }

       $responseObj = json_decode ( json_encode ( $json_array ), FALSE );
       
       return( $responseObj );
        
    }
    
    


    /**
     * unsuspendUser function.
     * 
     * @package Phởcebo Diner
     * @author Patricia Walton <patricia.walton@shrm.org>
     * @version 0.0.4
     * @access public
     * @param array $parameters
     * @return object 
     
        object(stdClass) (2) {
          ["idst"]=>
          string(5) "12339"
          ["success"]=>
          bool(true)
        }
     
     */
     
    public function unsuspendUser ( $parameters ) {
           
        if ( !array_key_exists( 'doceboId', $parameters) ) {
           
           $json_array = array ('success' => false, 'error' => '400', 'message' => 'Parameter doceboId missing');

        } else {
            
            $action = '/user/unsuspend';
            
            $data_params = array (
            
                'id_user'                 => $parameters['doceboId'],
                
//                 'unenroll_deactivated'    => Shoudl we deactivate all the future enrollments?
            
            );
            
            $response = self::call($action, $data_params);
           
            $json_array = json_decode($response, true);
            
            if ( false == $json_array['success']) {
               
               if ('210' == $json_array['error']) {
                   
                   $json_array['message'] = "Invalid user specification";
                   
               }
               
               if ('211' == $json_array['error']) {
                   
                   $json_array['message'] = "Error in user deletion";
                   
               }
            
               if ('500' == $json_array['error']) {
                   
                   $json_array['message'] = 'Internal server error';
                   
               }
            
            } else {
               
               $json_array['doceboId'] = $json_array['idst'];
               
               unset ( $json_array['idst'] );

            
            }
           
       }

       $responseObj = json_decode ( json_encode ( $json_array ), FALSE );
       
       return( $responseObj );
        
    }

    /**
     * Course Functions
     *
     */

    public function userCourses ( $parameters) {
        
       if ( !array_key_exists( 'doceboId', $parameters) ) {
           
           $json_array = array ('success' => false, 'error' => '301', 'message' => 'Parameter doceboId missing');
           
       } else {
           
           $action = '/user/userCourses';
       
           $data_params = array (
        
               'id_user'                 => $parameters['doceboId'],
    	
           );
     
           $response = self::call ( $action, $data_params );
           
           $json_array = json_decode($response, true);
           
           if ( false == $json_array['success']) {
               
               if ('210' == $json_array['error']) {
                   
                   $json_array['message'] = "Invalid User Specification";
                   
               }
    
               if ('500' == $json_array['error']) {
                   
                   $json_array['message'] = 'Internal server error';
                   
               }
    
           } else { // Success == true
               
    
           }
           
       }
       
       $responseObj = json_decode ( json_encode( $json_array ), FALSE );
       
       return( $responseObj );
 
    }
    
    
    public function listCourses () {
        
           $action = '/course/listCourses';
       
           $data_params = array (
        
               'category'                 => null,
    	
           );
     
           $response = self::call ( $action, $data_params );
           
           $json_array = json_decode($response, true);
           
           if ( false == $json_array['success']) {
    
               if ('500' == $json_array['error']) {
                   
                   $json_array['message'] = 'Internal server error';
                   
               }
    
           } else { // Success == true
               
    
           }
        
       $responseObj = json_decode ( json_encode( $json_array ), FALSE );
       
       return( $responseObj );
        
    }

    public function listUsersCourses ($parameters) {
        
       if ( !array_key_exists( 'doceboId', $parameters) ) {
           
           $json_array = array ('success' => false, 'error' => '301', 'message' => 'Parameter doceboId missing');
           
       } else {

           $action = '/course/listEnrolledCourses';
       
           $data_params = array (
        
               'id_user'                 => $parameters['doceboId'],
    	
           );
     
           $response = self::call ( $action, $data_params );
           
           $json_array = json_decode($response, true);
           
           if ( false == $json_array['success']) {
    
               if ('401' == $json_array['error']) {
                   
                   $json_array['message'] = 'Internal server error';
                   
               }

               if ('500' == $json_array['error']) {
                   
                   $json_array['message'] = 'Internal server error';
                   
               }
    
           } else { // Success == true
               
    
           }
           
       }
        
       $responseObj = json_decode ( json_encode( $json_array ), FALSE );
       
       return( $responseObj );
        
    }
    
    public function enrollUserInCourse ($parameters) {
        
       if ( !array_key_exists( 'doceboId', $parameters) ) {
           
           $json_array = array ('success' => false, 'error' => '301', 'message' => 'Parameter doceboId missing');
           
       } else {

           $action = '/course/addUserSubscription';
       
           $data_params = array (
        
               'id_user'                => $parameters['doceboId'],
               
               'course_code'            => $parameters['courseCode'],
               
               'user_level'             => 'student'
    	
           );
     
           $response = self::call ( $action, $data_params );
           
           $json_array = json_decode($response, true);
           
           if ( false == $json_array['success']) {
    
               if ('201' == $json_array['error']) {
                   
                   $json_array['message'] = 'Invalid parameters';
                   
               }

               if ('202' == $json_array['error']) {
                   
                   $json_array['message'] = 'Invalid specified course';
                   
               }

               if ('203' == $json_array['error']) {
                   
                   $json_array['message'] = 'User already enrolled to the course';
                   
               }

               if ('204' == $json_array['error']) {
                   
                   $json_array['message'] = 'Error while enrolling user';
                   
               }

               if ('500' == $json_array['error']) {
                   
                   $json_array['message'] = 'Internal server error';
                   
               }
    
           } else { // Success == true
               
    
           }
           
       }
        
       $responseObj = json_decode ( json_encode( $json_array ), FALSE );
       
       return( $responseObj );
        
    }

    public function unenrollUserInCourse ($parameters) {
        
       if ( !array_key_exists( 'doceboId', $parameters) ) {
           
           $json_array = array ('success' => false, 'error' => '301', 'message' => 'Parameter doceboId missing');
           
       } else {

           $action = '/course/deleteUserSubscription';
       
           $data_params = array (
        
               'id_user'                => $parameters['doceboId'],
               
               'course_code'            => $parameters['courseCode'],
               
               'user_level'             => 'student'
    	
           );
     
           $response = self::call ( $action, $data_params );
           
           $json_array = json_decode($response, true);
           
           if ( false == $json_array['success']) {
    
               if ('201' == $json_array['error']) {
                   
                   $json_array['message'] = 'Invalid parameters';
                   
               }

               if ('202' == $json_array['error']) {
                   
                   $json_array['message'] = 'Invalid specified course';
                   
               }

               if ('203' == $json_array['error']) {
                   
                   $json_array['message'] = 'User already enrolled to the course';
                   
               }

               if ('204' == $json_array['error']) {
                   
                   $json_array['message'] = 'Error while enrolling user';
                   
               }

               if ('500' == $json_array['error']) {
                   
                   $json_array['message'] = 'Internal server error';
                   
               }
    
           } else { // Success == true
               
    
           }
           
       }
        
       $responseObj = json_decode ( json_encode( $json_array ), FALSE );
       
       return( $responseObj );
        
    }


	/**
	 * getHash function.
	 * 
     * @package Phởcebo Cooking
     * @author Patricia Walton <patricia.walton@shrm.org>
     * @version 0.0.4
     * @access public
	 * @data_params mixed $params
	 *
	 * @return array $codice hash value for x_auth
	 *
	 */
	 
	public function getHash( $data_params ) {
    	
    	if ( !empty ( $data_params ) ) {
        	
    		$codice = array( 'sha1' => '', 'x_auth' => '' );
    		
    		$codice['sha1'] = sha1 ( implode( ',', $data_params ) . ',' . SECRET );
    		
    		$codice['x_auth'] = base64_encode ( KEY . ':' . $codice['sha1'] );
    		  		
    		return $codice;
    		
    	} else {
        	
        	return null;
        	
    	}
		
	}
	
	
	/**
	 * getDefaultHeader function.
	 * 
     * @package Phởcebo Cooking
     * @author Patricia Walton <patricia.walton@shrm.org>
     * @version 0.0.4
     * @access public
	 * @param mixed $x_auth
	 *
	 * @return array containting default header
	 *
	 */
	 
	private function getDefaultHeader( $x_auth ) {
    	
		$host = parse_url ( URL, PHP_URL_HOST );
		
 		return array (
			
			"Host: " . ($host ? $host : ''),
			
			"Content-Type: multipart/form-data",
			
			'X-Authorization: Docebo '.$x_auth,
			
		);
		
	}


	/**
	 * call function.
	 * 
     * @package Phởcebo Cooking
     * @author Patricia Walton <patricia.walton@shrm.org>
     * @version 0.0.4
     * @access public
	 * @param mixed $action Docebo API Call
	 * @param mixed $data_params parameters to send
	 *
	 * @return $output JSON formatted response
	 *
	 */
	 
	public function call ( $action, $data_params ) {
    	
		$curl = curl_init();

		$hash_info = self::getHash ( $data_params );

		$http_header = self::getDefaultHeader ( $hash_info['x_auth'] );

		$opt = array (
    		
			CURLOPT_URL => URL . '/api/' . $action,
			
			CURLOPT_RETURNTRANSFER => 1,
			
			CURLOPT_HTTPHEADER => $http_header,
			
			CURLOPT_POST => 1,
			
			CURLOPT_POSTFIELDS => $data_params,
			
			CURLOPT_CONNECTTIMEOUT => 5, // Timeout to 5 seconds
			
			CURLOPT_SSL_VERIFYPEER => false,
			
			CURLOPT_SSL_VERIFYHOST => false,
			
		);
		
		curl_setopt_array ( $curl, $opt );
		
		$output = curl_exec ( $curl );
		
		curl_close ( $curl );
		
		return $output;
		
	}

}


?>
